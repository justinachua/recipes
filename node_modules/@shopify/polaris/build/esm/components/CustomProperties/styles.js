import { osColorSchemes, tokens } from '../../tokens/tokens.js';

const defaultCustomProperties = `
  ${getColorSchemeDeclarations('light', tokens, osColorSchemes)}
  ${getStaticCustomProperties(tokens)}
`;
/**
 * Creates CSS Rules for each color-scheme.
 * @example:
 * [p-color-scheme="light"] {...}
 * [p-color-scheme="dark"] {...}
 * [p-color-scheme="dim"] {...}
 */

function getColorSchemeRules(tokens, osColorSchemes) {
  return Object.keys(tokens.colorSchemes).map(key => {
    const colorScheme = key;
    const selector = `[p-color-scheme="${colorScheme}"]`;
    const colorCustomProperties = getColorSchemeDeclarations(colorScheme, tokens, osColorSchemes);
    return `${selector}{${colorCustomProperties}${getStaticCustomProperties(tokens)}}`;
  }).join('');
}
/**
 * Creates static CSS custom properties.
 * Note: These values don't vary by color-scheme.
 */

function getStaticCustomProperties(tokens) {
  return Object.entries(tokens).filter(([tokenGroup]) => tokenGroup !== 'colorSchemes').map(([_, tokens]) => getCustomProperties(tokens)).join('');
}
/**
 * Creates CSS declarations for a given color-scheme.
 */

function getColorSchemeDeclarations(colorScheme, tokens, osColorSchemes) {
  return [`color-scheme:${osColorSchemes[colorScheme]};`, getCustomProperties(tokens.colorSchemes[colorScheme])].join('');
}
/**
 * Creates CSS custom properties for a given tokens object.
 */

function getCustomProperties(tokens) {
  return Object.entries(tokens).map(([name, value]) => `--p-${name}:${value};`).join('');
}
/**
 * Adapted from: https://github.com/argyleink/gui-challenges/blob/main/color-schemes/style.css
 */

const styles = `
  :root{${defaultCustomProperties}}
  ${getColorSchemeRules(tokens, osColorSchemes)}
`;

export { getColorSchemeDeclarations, getColorSchemeRules, getCustomProperties, getStaticCustomProperties, styles };
